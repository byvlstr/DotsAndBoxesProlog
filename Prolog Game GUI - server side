:- use_module(library(http/thread_httpd)).
:- use_module(library(http/http_dispatch)).
:- use_module(library(http/html_write)).
:- use_module(library(http/http_parameters)).
:- use_module(library(uri)).


%removes a row of our dimension size from the list
split(List,List1,List2,Dim):-
append(List1,List2,List),
length(List1,Dim).

%prints our list in matrix form
displayMatrix([],Dim).
displayMatrix(List,Dim):-
write('|'),
split(List,List1,Others,Dim),
displayRow(List1),
displayMatrix(Others,Dim).

%prints the row
displayRow([]):-nl.
displayRow([Head|Tail]):-
write(' '),write(Head),write(' |'),
displayRow(Tail).

% Predicate Display the winner
displayWinner(UserScore,ComputerScore) :-
% User is the winner
UserScore > ComputerScore,
write('You win :)');

% Computer is the winner
UserScore < ComputerScore,
write('You lost :(');

% Equality
write('Replay :-').

% Include files
% Creation de la liste
createList([],_,0).
createList([X],X,1).
createList([X|L],X,N) :- plus(S,1,N), createList(L, X, S).

% Remplacer un element dans la liste
replace([_|T], 0, X, [X|T]).
replace([H|T], I, X, [H|R]):- I > -1, NI is I-1, replace(T, NI, X, R), !.
replace(L, _, _, L).

% A replace that deals with two cases, easier for our game
% do not replace a value of -1
gameReplace(Value1,Value2,Index1,Index2,List,NewList):-
(   replace(List,Index1,Value1,TmpList);TmpList = List),
(   replace(TmpList,Index2,Value2,NewList);true),!.



%(edge filled,value)
%for filling in edges, corresponds to value that needs to be added
action(bottom,8).
action(top,2).
action(left,4).
action(right,1).
action(null,0).

%each action taken has a corresponding action
%to be taken by the neighbour
reaction(bottom,top).
reaction(top,bottom).
reaction(left,right).
reaction(right,left).


%(edge filled,index offset,value added to neighbour)
%Tells us who is the neighbour and how its value should be modified

%move predicate
move(Action,Index,Dim,[Player,Board,OldScore],[NextPlayer,NewBoard,NewScore]):-
checkMove(Action,Board,Index),
moveaux(Board,Action,Index,NewBoard,Dim,NewValue,NeighValue),
score([NewValue,NeighValue],OldScore,NewScore,Player,NextPlayer).

%predicate that executes the move on our list
moveaux(Board,Action,Index,NewBoard,Dim,NewValue,NeighValue):-
action(Action,Bit),
nth0(Index,Board,CurrentValue),
NewValue is CurrentValue + Bit,

neighbour(Action,Index,Dim,Reaction,NeighIndex),
action(Reaction,Bit2),
(   nth0(NeighIndex,Board,NValue);NValue = 0),
NeighValue is NValue + Bit2,
checkMove(Action,Board,Index),
gameReplace(NewValue,NeighValue
,Index,NeighIndex,Board,NewBoard),!.

%predicate to obtain what neighbour to update
%and what value to update it with
neighbour(Action,Index,Dim,Reaction,NeighIndex):-

( Action = bottom,NeighIndex is Index + Dim,
not(border(Action,Index,Dim)),reaction(Action,Reaction)  );
( Action = top,NeighIndex is Index - Dim,
not(border(Action,Index,Dim)),reaction(Action,Reaction)  );
( Action = left,NeighIndex is Index - 1,
not(border(Action,Index,Dim)),reaction(Action,Reaction)  );
( Action = right,NeighIndex is Index + 1,
not(border(Action,Index,Dim)),reaction(Action,Reaction)  );

( NeighIndex = -1,Reaction = null  ).

%predicate that returns true if the move is a border case
border(Action,Index,Dim):-
(  Action = bottom, checkBottom(Index,Dim) );
(  Action = top,checkTop(Index,Dim) );
(  Action = left,checkLeft(Index,Dim) );
(  Action = right,checkRight(Index,Dim) ).

checkBottom(Index,Dim):-
Dimension is Dim*Dim,
Index >= Dimension - Dim.

checkTop(Index,Dim):-
Index =< Dim - 1.

checkLeft(Index,Dim):-
Check is Index mod Dim,
Check is 0.

checkRight(Index,Dim):-
Check is Index mod Dim,
Check is Dim - 1.


%predicate to check if an edge has already been filled previously
%returns true if move is legal
checkMove(Action,Board,Index):-
nth0(Index,Board,CurrentValue),
action(Action,Bit),
check(CurrentValue,Bit).

check(CurrentValue,Bit):-
Check is CurrentValue /\ Bit,
not(Check is Bit).

% Calculate Score
score([Value1,Value2],OldScore,NewScore,CurrentPlayer,NextPlayer) :-
(   Value1 = 15, Value2 = 15 ),
NewScore is OldScore + 2,!,
NextPlayer = CurrentPlayer;
(   Value1 = 15; Value2 = 15 ),
NewScore is OldScore + 1,!,
NextPlayer = CurrentPlayer;
NewScore is OldScore, nextPlayer(CurrentPlayer,NextPlayer).

% Verify if it's finished
gameOver(UserScore, ComputerScore,Dim) :-
Total is UserScore + ComputerScore,
MaxScore is Dim*Dim,
Total = MaxScore.

% Alternate Players
nextPlayer(user,computer).
nextPlayer(computer,user).

% Prédicate of play/11
% +Board@ list: board game
% +UserScore@ integer: user score (Incremented by one)
% +ComputerScore@ integer: computer score (Incremented by one)
% +Player@ const: player turn [ user | computer ]
play(Action,Index,Board,NewBoard,User1Score,NewUser1Score,User2Score,NewUser2Score,Player,NextPlayer,Dim,Mode) :-

% User turn
Player = user,
(Mode = 3, computerPlay2(Board,NewBoard,User1Score,NewUser1Score,NextPlayer,Dim), NewUser2Score is User2Score);

Player = user,
userPlay(Action,Index,Board,NewBoard,User1Score,NewUser1Score,NextPlayer,Dim),
NewUser2Score is User2Score;

% Computer turn
Player = computer,
(Mode = 2, userPlay2(Action,Index,Board,NewBoard,User2Score,NewUser2Score,NextPlayer,Dim), NewUser1Score is User1Score);

Player = computer,
computerPlay(Board,NewBoard,User2Score,NewUser2Score,NextPlayer,Dim),
NewUser1Score is User1Score.

% Predicate user player/5
% +Board@ list: board game
% +NewBoard@ list: the new board after playing
% +OldScore@ integer: the score before playing
% -NewScore@ integer: the score after playing
% -NextPlaying@ const: [ user | computer ] it's the next player turn
userPlay(Action, Index, Board,NewBoard,OldScore,NewScore,NextPlayer,Dim) :-
move(Action,Index,Dim,[user,Board,OldScore],[NextPlayer,NewBoard,NewScore]).

% Predicate user player2 /5
% +Board@ list: board game
% +NewBoard@ list: the new board after playing
% +OldScore@ integer: the score before playing
% -NewScore@ integer: the score after playing
% -NextPlaying@ const: [ user | computer ] it's the next player turn
userPlay2(Action, Index, Board,NewBoard,OldScore,NewScore,NextPlayer,Dim) :-
move(Action,Index,Dim,[computer,Board,OldScore],[NextPlayer,NewBoard,NewScore]).



% Predicate computer player/5
% +Board@ list: board game
% +NewBoard@ list: the new board after playing
% +OldScore@ integer: the score before playing
% -NewScore@ integer: the score after playing
% -NextPlaying@ const: [ user | computer ] it's the next player turn
computerPlay(Board,NewBoard,OldScore,NewScore,NextPlayer,Dim) :-
ai(computer,Board,Action,Index,Dim),
move(Action,Index,Dim,[computer,Board,OldScore],[NextPlayer,NewBoard,NewScore]).

computerPlay2(Board,NewBoard,OldScore,NewScore,NextPlayer,Dim) :-
ai(user,Board,Action,Index,Dim),
move(Action,Index,Dim,[user,Board,OldScore],[NextPlayer,NewBoard,NewScore]).


ai(Player,Board,Action,Index,Dim):-
find(Board,Action,Index,Player,Dim).

find(Board,Action,Index,Player,Dim):-
(   nth0(Index,Board,14);nth0(Index,Board,11);nth0(Index,Board,7);nth0(Index,Board,13)),!;
findall([Act,Ind],move(Act,Ind,Dim,[Player,Board,0],[_,_,_]),MovePool),
random_permutation(MovePool,Pool),
chooseMove(Pool,Board,Dim,Pool,Action,Index).

chooseMove([Head|Tail],Board,Dim,Pool,Action,Index):-
nth0(0,Head,Act),
nth0(1,Head,Ind),
moveaux(Board,Act,Ind,NewBoard,Dim,NewValue,NeighValue),
( checkThreeSides(NewValue),checkThreeSides(NeighValue),Action = Act,Index = Ind;
chooseMove(Tail,Board,Dim,Pool,Action,Index)
).

chooseMove([],Board,Dim,Pool,Action,Index):-
length(Pool,Length),
random(0,Length,Pos),
nth0(Pos,Pool,Move),
nth0(0,Move,Action),
nth0(1,Move,Index).


checkThreeSides(Value):-
Value =\= 14,
Value =\= 13,
Value =\= 11,
Value =\= 7.


game(Dim) :-
Dimension is Dim*Dim,
createList(Board,0,Dimension),
play(Board,0,0,user,Dim).

stringTokenizer([], []).
stringTokenizer([N|Ns], [Digit|Rest]):-
atom_number(N, Digit),  stringTokenizer(Ns, Rest).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%PROLOG SERVER

%Mise en place du server à ladresse http://localhost/game
:- http_handler(root(game), proceed_play,  []).
server(Port) :- http_server(http_dispatch, [port(Port)]).

proceed_play(Request) :-
format('Access-Control-Allow-Origin: * ~n'),
format('Access-Control-Allow-Headers: origin, x-requested-with, content-type ~n'),
format('Access-Control-Allow-Methods: PUT, GET, POST, DELETE, OPTIONS ~n'),

http_parameters(Request,
%recuperation des parametres d URL
[
turnIndex(Index, [integer]),
turnAction(Action, []),
board(OldBoard, [string]),
user(User, []),
scoreUser1(ScoreUser1, [integer]),
scoreUser2(ScoreUser2, [integer]),
dim(Dim, [integer]),
mode(Mode, [integer])
]),
format('Content-type: text/plain~n~n'),
split_string(OldBoard, ".", "", TmpBoard),
stringTokenizer(TmpBoard, Board),
play(Action,Index,Board,NewBoard,ScoreUser1,NewScoreUser1,ScoreUser2,NewScoreUser2,User,NextPlayer,Dim,Mode),

%On envoie les reponses par json
jsonState(NewBoard, NewScoreUser1, NewScoreUser2, NextPlayer, Dim).


%Predicat pour envoyer la reponse JSON
jsonState([H|T], ScoreUser1, ScoreUser2, NextPlayer, Dim) :- format('{'),
jsonBoard([H|T]), jsonScoreUser1(ScoreUser1), jsonScoreUser2(ScoreUser2),
% On verifie si le jeu est termine
(gameOver(ScoreUser1, ScoreUser2, Dim), jsonGameOver(ScoreUser1, ScoreUser2), format('}'));

format('"game_over" : false, '), jsonPlayer(NextPlayer), format('}').


%Affichage de la board en JSON
jsonBoard([H|T]) :-
format('"board" : ['),
atomic_list_concat([H|T], ',', Atom),
format('~w,', Atom),
format('""], ').

%Affichage du nouveau score
jsonScoreUser1(X) :- format('"score_user1" : '), format('~d,', X).

%Affichage du nouveau score
jsonScoreUser2(X) :- format('"score_user2" : '), format('~d,', X).

%Affichage du prochain joueur
jsonPlayer(X) :- format('"next_player" : "'), format('~w', X), format('"').

%Affichage du resultat en cas de fin de jeu
jsonGameOver(ScoreUser1, ScoreUser2) :- format('"game_over" : true, "gagnant" :"'),
(ScoreUser1 > ScoreUser2,format('user"') );
(ScoreUser1 < ScoreUser2,format('computer"') );
(ScoreUser1 = ScoreUser2,format('aucun"') ).
